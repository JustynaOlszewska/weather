{"version":3,"sources":["utilis.js","styles/styleComponents/AppWeatherCSS.js","componentes/AppWeather.js","customHookWeatherApi/useWeatherApi.js"],"names":["activeClassName","Api_Url","API_KEY","process","units","StyleApplication","styled","main","breakPoints","small","middle","FormSearchCity","lazy","Wish","WeatherList","NotFound","AppWeather","useState","url","setUrl","weather","setWeather","isError","setIsError","useEffect","a","axios","get","res","status","alertCity","data","console","log","fetchData","alert","useWeatherApi","exact","path","component","length"],"mappings":"2GAAA,wIAAO,IAAMA,EAAkB,cAElBC,EAAU,yCACVC,EAAUC,mCACVC,EAAQ,K,okBCAd,IAAMC,EAAmBC,UAAOC,KAAV,IAYTC,IAAYC,MAKZD,IAAYE,Q,kDCd1BC,EAAiBC,gBAAK,kBAAM,gCAC5BC,EAAOD,gBAAK,kBAAM,gCAClBE,EAAcF,gBAAK,kBAAM,gCACzBG,EAAWH,gBAAK,kBAAM,gCAsBbI,UApBI,WAAO,IAAD,ECNI,WAAO,IAAD,EAETC,mBAAS,GAAD,OAAIhB,IAAJ,8BAAiCG,IAAjC,gBAA8CF,MAF7C,mBAExBgB,EAFwB,KAEnBC,EAFmB,OAGDF,mBAAS,IAHR,mBAGxBG,EAHwB,KAGfC,EAHe,OAKDJ,oBAAS,GALR,mBAKxBK,EALwB,KAKfC,EALe,KAO/BC,qBAAU,YACS,uCAAG,8BAAAC,EAAA,sEAEVF,GAAW,GAFD,SAGQG,IAAMC,IAAIT,GAHlB,UAIS,OADbU,EAHI,QAIFC,OAJE,yCAIqBC,KAJrB,uBAKSF,EAAIG,KAAKA,KALlB,cAKJA,EALI,yBAMHV,EAAWU,IANR,kCAQVR,GAAW,GACXS,QAAQC,IAAR,MATU,kEAAH,oDAYfC,KACD,CAAChB,IAEJ,IAAMY,EAAY,WACdK,MAAM,2BAGV,MAAO,CAAC,CAAEf,UAASE,WAAWH,GDnBSiB,GAFlB,0BAEZhB,EAFY,EAEZA,QAASE,EAFG,EAEHA,QAAWH,EAFR,KAIrB,OACI,eAACd,EAAD,WACI,yCACA,cAACM,EAAD,CAAgBQ,OAAQA,IACvBG,GAAW,0DACZ,eAAC,IAAD,WACI,cAAC,IAAD,CAAOe,OAAK,EAACC,KAAK,WAAWC,UAAW,kBAAM,cAAC1B,EAAD,OAC9C,cAAC,IAAD,CAAOyB,KAAK,YAAZ,SACKlB,EAAQoB,QAAU,cAAC1B,EAAD,CAAaM,QAASA,MAE7C,cAAC,IAAD,CAAOmB,UAAWxB","file":"static/js/4.b4d4c540.chunk.js","sourcesContent":["export const activeClassName = 'active-link'\r\n\r\nexport const Api_Url = 'https://api.weatherbit.io/v2.0/current';\r\nexport const API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\r\nexport const units = 'M';\r\n\r\n","import styled from \"styled-components\";\r\n\r\nimport { breakPoints } from '../variables';\r\n\r\nexport const StyleApplication = styled.main`\r\ndisplay: flex;\r\nflex-direction: column;\r\nheight: 100vh;\r\nmax-height: 100%;\r\ntext-align: center;\r\nfont-size: 1rem;\r\ncolor: #FFF;\r\ntext-shadow: 2px 2px 2px #000000;\r\noverflow: hidden;\r\n\r\n& > h1 {\r\n@media(min-width: ${breakPoints.small}) {\r\n    font-size: 1rem;\r\n    margin-bottom: 1px;\r\n};\r\n\r\n@media(min-width: ${breakPoints.middle}) {\r\n    font-size: 2rem;\r\n};\r\n@media(min-height: 730px) and (orientation: portrait) {\r\n    font-size: 4rem;\r\n};\r\n};\r\n`;\r\n","import React, { lazy } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\n\r\nimport { StyleApplication } from '../styles/styleComponents/AppWeatherCSS';\r\n\r\nimport { useWeatherApi } from '../customHookWeatherApi/useWeatherApi';\r\n\r\nconst FormSearchCity = lazy(() => import('./FormSearchCity'));\r\nconst Wish = lazy(() => import('./Wish'));\r\nconst WeatherList = lazy(() => import('./WeatherList'));\r\nconst NotFound = lazy(() => import('./NotFound'));\r\n\r\nconst AppWeather = () => {\r\n\r\n    const [{ weather, isError }, setUrl] = useWeatherApi();\r\n\r\n    return (\r\n        <StyleApplication>\r\n            <h1>Weather</h1>\r\n            <FormSearchCity setUrl={setUrl} />\r\n            {isError && <div>Something went wrong...</div>}\r\n            <Switch>\r\n                <Route exact path='/weather' component={() => <Wish />} />\r\n                <Route path='/forecast'>\r\n                    {weather.length && <WeatherList weather={weather} />}\r\n                </Route>\r\n                <Route component={NotFound} />\r\n            </Switch>\r\n        </StyleApplication>\r\n    );\r\n};\r\n\r\nexport default AppWeather;","import { useState, useEffect } from 'react';\r\n\r\nimport axios from 'axios';\r\n\r\nimport { Api_Url, API_KEY, units } from '../utilis';\r\n\r\nexport const useWeatherApi = () => {\r\n\r\n    const [url, setUrl] = useState(`${Api_Url}?city=Warsaw&units=${units}&key=${API_KEY}`);\r\n    const [weather, setWeather] = useState([]);\r\n\r\n    const [isError, setIsError] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                setIsError(false);\r\n                const res = await axios.get(url);\r\n                if (res.status === 204) return alertCity();\r\n                const data = await res.data.data;\r\n                return setWeather(data);\r\n            } catch (error) {\r\n                setIsError(true);\r\n                console.log(error);\r\n            };\r\n        };\r\n        fetchData()\r\n    }, [url]);\r\n\r\n    const alertCity = () => {\r\n        alert('Wrong city, I am sorry')\r\n    };\r\n\r\n    return [{ weather, isError }, setUrl];\r\n};"],"sourceRoot":""}